import PDFDocument from 'pdfkit';

export const generateSupplierReport = async (req, res) => {
  try {
    const { title, generatedAt, summary, suppliers } = req.body;

    // Create a new PDF document
    const doc = new PDFDocument({
      margin: 50,
      size: 'A4'
    });

    // Set response headers for PDF
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=suppliers-report-${new Date().toISOString().split('T')[0]}.pdf`);

    // Pipe the PDF to the response
    doc.pipe(res);

    // Add header
    doc.fontSize(24)
       .fillColor('#2563eb')
       .text('SUPPLIERS REPORT', 50, 50, { align: 'center' });

    doc.fontSize(12)
       .fillColor('#666666')
       .text(`Generated on: ${new Date(generatedAt).toLocaleDateString()}`, 50, 90, { align: 'center' });

    // Add summary statistics
    let yPosition = 140;
    doc.fontSize(16)
       .fillColor('#1f2937')
       .text('Summary Statistics', 50, yPosition);

    yPosition += 30;
    const stats = [
      { label: 'Total Suppliers', value: summary.totalSuppliers },
      { label: 'Registered Companies', value: summary.totalSuppliers },
      { label: 'Business Partners', value: summary.activeSuppliers || summary.totalSuppliers }
    ];

    stats.forEach((stat, index) => {
      const x = 50 + (index % 3) * 160;
      const y = yPosition + Math.floor(index / 3) * 30;
      
      doc.fontSize(10)
         .fillColor('#4b5563')
         .text(stat.label, x, y);
      
      doc.fontSize(14)
         .fillColor('#1f2937')
         .text(stat.value.toString(), x, y + 15);
    });

    yPosition += 60;

    // Add table header
    doc.fontSize(14)
       .fillColor('#1f2937')
       .text('Supplier Details', 50, yPosition);

    yPosition += 30;

    // Table headers
    const headers = ['Name', 'Email', 'Company', 'Rating', 'Orders'];
    const columnWidths = [100, 140, 120, 60, 60];
    const tableLeft = 50;

    doc.fontSize(10)
       .fillColor('#374151');

    let xPosition = tableLeft;
    headers.forEach((header, index) => {
      doc.text(header, xPosition, yPosition, { width: columnWidths[index], align: 'left' });
      xPosition += columnWidths[index];
    });

    // Draw header line
    yPosition += 15;
    doc.moveTo(tableLeft, yPosition)
       .lineTo(tableLeft + columnWidths.reduce((a, b) => a + b), yPosition)
       .stroke('#d1d5db');

    yPosition += 10;

    // Add supplier data
    suppliers.forEach((supplier, index) => {
      if (yPosition > 750) { // Start new page if needed
        doc.addPage();
        yPosition = 50;
      }

      const rowData = [
        supplier.name || 'N/A',
        supplier.email || 'N/A',
        supplier.companyName || 'N/A',
        supplier.rating || 'N/A',
        supplier.totalOrders?.toString() || '0'
      ];

      // Alternate row colors
      if (index % 2 === 0) {
        doc.rect(tableLeft, yPosition - 5, columnWidths.reduce((a, b) => a + b), 20)
           .fill('#f9fafb')
           .stroke();
      }

      doc.fillColor('#374151');
      xPosition = tableLeft;
      rowData.forEach((data, colIndex) => {
        const text = data.length > 15 ? data.substring(0, 12) + '...' : data;
        doc.text(text, xPosition, yPosition, { 
          width: columnWidths[colIndex], 
          align: 'left',
          height: 15,
          ellipsis: true
        });
        xPosition += columnWidths[colIndex];
      });

      yPosition += 20;
    });

    // Add footer
    const pageCount = doc.bufferedPageRange().count;
    for (let i = 0; i < pageCount; i++) {
      doc.switchToPage(i);
      doc.fontSize(8)
         .fillColor('#9ca3af')
         .text(`Page ${i + 1} of ${pageCount}`, 50, doc.page.height - 30, {
           align: 'center'
         });
      
      doc.text('Generated by MERN Business Dashboard', 50, doc.page.height - 20, {
        align: 'center'
      });
    }

    // Finalize the PDF
    doc.end();

  } catch (error) {
    console.error('Error generating PDF report:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to generate PDF report',
      error: error.message
    });
  }
};

export default {
  generateSupplierReport
};